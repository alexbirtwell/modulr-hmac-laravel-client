<?php
/**
 * BeneficiariesApi
 * PHP version 5.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Modulr API.
 *
 * Modulo API
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AlexBirtwell\ModulrHmacLaravel\Api;

use AlexBirtwell\ModulrHmacLaravel\ApiClient;
use AlexBirtwell\ModulrHmacLaravel\ApiException;

/**
 * BeneficiariesApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BeneficiariesApi
{
    /**
     * API Client.
     *
     * @var \AlexBirtwell\ModulrHmacLaravel\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor.
     *
     * @param \AlexBirtwell\ModulrHmacLaravel\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\AlexBirtwell\ModulrHmacLaravel\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client.
     *
     * @return \AlexBirtwell\ModulrHmacLaravel\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client.
     *
     * @param \AlexBirtwell\ModulrHmacLaravel\ApiClient $apiClient set the API client
     *
     * @return BeneficiariesApi
     */
    public function setApiClient(\AlexBirtwell\ModulrHmacLaravel\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;

        return $this;
    }

    /**
     * Operation createBeneficiary.
     *
     * Create Beneficiary
     *
     * @param string                                                            $cid                        Id of Customer to create Beneficiary for (required)
     * @param \AlexBirtwell\ModulrHmacLaravel\Model\CreateBeneficiaryRequest $create_beneficiary_request createBeneficiaryRequest (required)
     *
     * @throws \AlexBirtwell\ModulrHmacLaravel\ApiException on non-2xx response
     *
     * @return \AlexBirtwell\ModulrHmacLaravel\Model\Beneficiary
     */
    public function createBeneficiary($cid, $create_beneficiary_request)
    {
        list($response) = $this->createBeneficiaryWithHttpInfo($cid, $create_beneficiary_request);

        return $response;
    }

    /**
     * Operation createBeneficiaryWithHttpInfo.
     *
     * Create Beneficiary
     *
     * @param string                                                            $cid                        Id of Customer to create Beneficiary for (required)
     * @param \AlexBirtwell\ModulrHmacLaravel\Model\CreateBeneficiaryRequest $create_beneficiary_request createBeneficiaryRequest (required)
     *
     * @throws \AlexBirtwell\ModulrHmacLaravel\ApiException on non-2xx response
     *
     * @return array of \AlexBirtwell\ModulrHmacLaravel\Model\Beneficiary, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBeneficiaryWithHttpInfo($cid, $create_beneficiary_request)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cid when calling createBeneficiary');
        }
        // verify the required parameter 'create_beneficiary_request' is set
        if ($create_beneficiary_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_beneficiary_request when calling createBeneficiary');
        }
        // parse inputs
        $resourcePath = '/customers/{cid}/beneficiaries';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{'.'cid'.'}',
                $this->apiClient->getSerializer()->toPathValue($cid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_beneficiary_request)) {
            $_tempBody = $create_beneficiary_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AlexBirtwell\ModulrHmacLaravel\Model\Beneficiary',
                '/customers/{cid}/beneficiaries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\AlexBirtwell\ModulrHmacLaravel\Model\Beneficiary', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AlexBirtwell\ModulrHmacLaravel\Model\Beneficiary', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBeneficiaries.
     *
     * Delete Beneficiaries
     *
     * @param string   $cid Id of Customer to delete Beneficiaries for (required)
     * @param string[] $bid Id(s) of Beneficiaries to delete, must owned by customer and active (required)
     *
     * @throws \AlexBirtwell\ModulrHmacLaravel\ApiException on non-2xx response
     *
     * @return \AlexBirtwell\ModulrHmacLaravel\Model\MessageResponse
     */
    public function deleteBeneficiaries($cid, $bid)
    {
        list($response) = $this->deleteBeneficiariesWithHttpInfo($cid, $bid);

        return $response;
    }

    /**
     * Operation deleteBeneficiariesWithHttpInfo.
     *
     * Delete Beneficiaries
     *
     * @param string   $cid Id of Customer to delete Beneficiaries for (required)
     * @param string[] $bid Id(s) of Beneficiaries to delete, must owned by customer and active (required)
     *
     * @throws \AlexBirtwell\ModulrHmacLaravel\ApiException on non-2xx response
     *
     * @return array of \AlexBirtwell\ModulrHmacLaravel\Model\MessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBeneficiariesWithHttpInfo($cid, $bid)
    {
        // verify the required parameter 'cid' is set
        if ($cid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cid when calling deleteBeneficiaries');
        }
        // verify the required parameter 'bid' is set
        if ($bid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bid when calling deleteBeneficiaries');
        }
        // parse inputs
        $resourcePath = '/customers/{cid}/beneficiaries';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($bid)) {
            $bid = $this->apiClient->getSerializer()->serializeCollection($bid, 'multi', true);
        }
        if ($bid !== null) {
            $queryParams['bid'] = $this->apiClient->getSerializer()->toQueryValue($bid);
        }
        // path params
        if ($cid !== null) {
            $resourcePath = str_replace(
                '{'.'cid'.'}',
                $this->apiClient->getSerializer()->toPathValue($cid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AlexBirtwell\ModulrHmacLaravel\Model\MessageResponse',
                '/customers/{cid}/beneficiaries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\AlexBirtwell\ModulrHmacLaravel\Model\MessageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AlexBirtwell\ModulrHmacLaravel\Model\MessageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 207:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AlexBirtwell\ModulrHmacLaravel\Model\MessageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBeneficiariesUsingGET.
     *
     * getBeneficiaries
     *
     * @param string[]  $id             Id of Beneficiary(s) to fetch (optional)
     * @param string    $customer_id    Filter by Customer Id (optional)
     * @param int       $page           Page to fetch (0 indexed) (optional)
     * @param int       $size           Size of Page to fetch (optional, default to 20)
     * @param \DateTime $created_date   Created date (optional)
     * @param string    $partial_name   Partial name (optional)
     * @param string    $sort_code      Sort code (optional)
     * @param string    $account_number Account number (optional)
     *
     * @throws \AlexBirtwell\ModulrHmacLaravel\ApiException on non-2xx response
     *
     * @return \AlexBirtwell\ModulrHmacLaravel\Model\PageResponseBeneficiary_
     */
    public function getBeneficiariesUsingGET($id = null, $customer_id = null, $page = null, $size = null, $created_date = null, $partial_name = null, $sort_code = null, $account_number = null)
    {
        list($response) = $this->getBeneficiariesUsingGETWithHttpInfo($id, $customer_id, $page, $size, $created_date, $partial_name, $sort_code, $account_number);

        return $response;
    }

    /**
     * Operation getBeneficiariesUsingGETWithHttpInfo.
     *
     * getBeneficiaries
     *
     * @param string[]  $id             Id of Beneficiary(s) to fetch (optional)
     * @param string    $customer_id    Filter by Customer Id (optional)
     * @param int       $page           Page to fetch (0 indexed) (optional)
     * @param int       $size           Size of Page to fetch (optional, default to 20)
     * @param \DateTime $created_date   Created date (optional)
     * @param string    $partial_name   Partial name (optional)
     * @param string    $sort_code      Sort code (optional)
     * @param string    $account_number Account number (optional)
     *
     * @throws \AlexBirtwell\ModulrHmacLaravel\ApiException on non-2xx response
     *
     * @return array of \AlexBirtwell\ModulrHmacLaravel\Model\PageResponseBeneficiary_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBeneficiariesUsingGETWithHttpInfo($id = null, $customer_id = null, $page = null, $size = null, $created_date = null, $partial_name = null, $sort_code = null, $account_number = null)
    {
        // parse inputs
        $resourcePath = '/beneficiaries';
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($id)) {
            $id = $this->apiClient->getSerializer()->serializeCollection($id, 'multi', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($customer_id !== null) {
            $queryParams['customerId'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($created_date !== null) {
            $queryParams['createdDate'] = $this->apiClient->getSerializer()->toQueryValue($created_date);
        }
        // query params
        if ($partial_name !== null) {
            $queryParams['partialName'] = $this->apiClient->getSerializer()->toQueryValue($partial_name);
        }
        // query params
        if ($sort_code !== null) {
            $queryParams['sortCode'] = $this->apiClient->getSerializer()->toQueryValue($sort_code);
        }
        // query params
        if ($account_number !== null) {
            $queryParams['accountNumber'] = $this->apiClient->getSerializer()->toQueryValue($account_number);
        }
        // default format to json
        $resourcePath = str_replace('{format}', 'json', $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AlexBirtwell\ModulrHmacLaravel\Model\PageResponseBeneficiary_',
                '/beneficiaries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\AlexBirtwell\ModulrHmacLaravel\Model\PageResponseBeneficiary_', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AlexBirtwell\ModulrHmacLaravel\Model\PageResponseBeneficiary_', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
